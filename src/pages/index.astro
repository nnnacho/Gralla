---
import Layout from "../layouts/Layout.astro";
import Hero from "../components/Hero.astro";
import IconSection from "../components/IconSection.astro";
---

<Layout title="Gralla">
  <main class="flex justify-center items-center flex-col">
    <section>
      <Hero />
    </section>
    <section>
      <IconSection />
    </section>

    <section class="py-28 w-[1024px] flex flex-col justify-center" id="record">
      <h1
        class="mb-4 text-2xl font-bold leading-none tracking-tight text-center text-[#fffffe] md:text-5xl lg:text-4xl"
      >
        Selecciona el tipo de <span
          class="underline underline-offset-3 decoration-4 decoration-[#ff8906]"
          >Grabación</span
        >
      </h1>
      <p
        class="text-lg font-normal text-gray-500 lg:text-xl dark:text-gray-400 text-center mb-10"
      >
        A continuación hay botones con las diferentes funcionalidades para
        grabar, selecciona todas las que quieras!
      </p>

      <ul class="grid w-full gap-6 md:grid-cols-3">
        <li>
          <input
            type="checkbox"
            id="screen-option"
            value=""
            class="hidden peer"
            required=""
          />
          <label
            for="screen-option"
            class="transition-all inline-flex items-center justify-between w-full p-5 text-gray-500 bg-white border-2 border-gray-200 rounded-lg cursor-pointer dark:hover:text-gray-300 dark:border-gray-700 peer-checked:border-[#ff8906] hover:text-gray-600 dark:peer-checked:text-gray-300 peer-checked:text-gray-600 hover:bg-gray-50 dark:text-gray-400 dark:bg-gray-800 dark:hover:bg-gray-700"
          >
            <div class="block">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                class="icon icon-tabler icon-tabler-screen-share mb-2"
                width="24"
                height="24"
                viewBox="0 0 24 24"
                stroke-width="2"
                stroke="currentColor"
                fill="none"
                stroke-linecap="round"
                stroke-linejoin="round"
                ><path stroke="none" d="M0 0h24v24H0z" fill="none"></path><path
                  d="M21 12v3a1 1 0 0 1 -1 1h-16a1 1 0 0 1 -1 -1v-10a1 1 0 0 1 1 -1h9"
                ></path><path d="M7 20l10 0"></path><path d="M9 16l0 4"
                ></path><path d="M15 16l0 4"></path><path d="M17 4h4v4"
                ></path><path d="M16 9l5 -5"></path></svg
              >
              <div class="w-full text-lg font-semibold">Pantalla</div>
              <div class="w-full text-sm">
                Selecciona esta opción si quieres grabar tú pantalla.
              </div>
            </div>
          </label>
        </li>
        <li>
          <input type="checkbox" id="mic-option" value="" class="hidden peer" />
          <label
            for="mic-option"
            class="transition-all inline-flex items-center justify-between w-full p-5 text-gray-500 bg-white border-2 border-gray-200 rounded-lg cursor-pointer dark:hover:text-gray-300 dark:border-gray-700 peer-checked:border-[#ff8906] hover:text-gray-600 dark:peer-checked:text-gray-300 peer-checked:text-gray-600 hover:bg-gray-50 dark:text-gray-400 dark:bg-gray-800 dark:hover:bg-gray-700"
          >
            <div class="block">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                class="icon icon-tabler icon-tabler-microphone mb-2"
                width="24"
                height="24"
                viewBox="0 0 24 24"
                stroke-width="2"
                stroke="currentColor"
                fill="none"
                stroke-linecap="round"
                stroke-linejoin="round"
                ><path stroke="none" d="M0 0h24v24H0z" fill="none"></path><path
                  d="M9 2m0 3a3 3 0 0 1 3 -3h0a3 3 0 0 1 3 3v5a3 3 0 0 1 -3 3h0a3 3 0 0 1 -3 -3z"
                ></path><path d="M5 10a7 7 0 0 0 14 0"></path><path
                  d="M8 21l8 0"></path><path d="M12 17l0 4"></path></svg
              >
              <div class="w-full text-lg font-semibold">Micrófono</div>
              <div class="w-full text-sm">
                Selecciona esta opción si quieres grabar el audio de tu
                micrófono.
              </div>
            </div>
          </label>
        </li>
        <li>
          <input
            type="checkbox"
            id="sound-option"
            value=""
            class="hidden peer"
          />
          <label
            for="sound-option"
            class="transition-all inline-flex items-center justify-between w-full p-5 text-gray-500 bg-white border-2 border-gray-200 rounded-lg cursor-pointer dark:hover:text-gray-300 dark:border-gray-700 peer-checked:border-[#ff8906] hover:text-gray-600 dark:peer-checked:text-gray-300 peer-checked:text-gray-600 hover:bg-gray-50 dark:text-gray-400 dark:bg-gray-800 dark:hover:bg-gray-700"
          >
            <div class="block">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                class="icon icon-tabler icon-tabler-volume mb-2"
                width="24"
                height="24"
                viewBox="0 0 24 24"
                stroke-width="2"
                stroke="currentColor"
                fill="none"
                stroke-linecap="round"
                stroke-linejoin="round"
                ><path stroke="none" d="M0 0h24v24H0z" fill="none"></path><path
                  d="M15 8a5 5 0 0 1 0 8"></path><path
                  d="M17.7 5a9 9 0 0 1 0 14"></path><path
                  d="M6 15h-2a1 1 0 0 1 -1 -1v-4a1 1 0 0 1 1 -1h2l3.5 -4.5a.8 .8 0 0 1 1.5 .5v14a.8 .8 0 0 1 -1.5 .5l-3.5 -4.5"
                ></path></svg
              >
              <div class="w-full text-lg font-semibold">Sonido</div>
              <div class="w-full text-sm">
                Graba el sonido de tu computadora de manera nativa.
              </div>
            </div>
          </label>
        </li>
      </ul>
      <div class="mt-8 gap-3 flex justify-center">
        <button
          class="inline-flex justify-center items-center gap-x-3 text-center bg-gradient-to-tl from-[#ff8906] to-[#f25f4c] hover:scale-105 transition-transform border border-transparent text-white text-sm font-medium rounded-md focus:outline-none focus:ring-1 focus:ring-gray-600 py-3 px-4 dark:focus:ring-offset-gray-800"
          id="recorder"
        >
          Comenzar Grabación
        </button>
      </div>

      <!-- Modal toggle -->
      <button
        data-modal-target="default-modal"
        data-modal-toggle="default-modal"
        class="hidden text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800"
        type="button"
      >
        Toggle modal
      </button>

      <!-- Main modal -->
      <div
        id="default-modal"
        tabindex="-1"
        aria-hidden="true"
        class="hidden overflow-y-auto overflow-x-hidden fixed top-0 right-0 left-0 z-50 justify-center items-center w-full md:inset-0 h-[calc(100%-1rem)] max-h-full"
      >
        <div class="relative p-4 w-full max-w-2xl max-h-full">
          <!-- Modal content -->
          <div class="relative bg-white rounded-lg shadow dark:bg-gray-700">
            <!-- Modal header -->
            <div
              class="flex items-center justify-between p-4 md:p-5 border-b rounded-t dark:border-gray-600"
            >
              <span class="hidden relative h-3 w-3 flex" id="animation">
                <span
                  class="animate-ping absolute inline-flex h-full w-full rounded-full bg-sky-400 opacity-75"
                ></span>
                <span
                  class="relative inline-flex rounded-full h-3 w-3 bg-[#ff8906]"
                ></span>
              </span>
              <h3
                class="ml-2 text-xl font-semibold text-gray-900 dark:text-white"
                id="title-record-audio"
              >
                Grabación de audio
              </h3>
              <button
                type="button"
                class="text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm w-8 h-8 ms-auto inline-flex justify-center items-center dark:hover:bg-gray-600 dark:hover:text-white"
                data-modal-hide="default-modal"
              >
                <svg
                  class="w-3 h-3"
                  aria-hidden="true"
                  xmlns="http://www.w3.org/2000/svg"
                  fill="none"
                  viewBox="0 0 14 14"
                >
                  <path
                    stroke="currentColor"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="m1 1 6 6m0 0 6 6M7 7l6-6M7 7l-6 6"></path>
                </svg>
                <span class="sr-only">Close modal</span>
              </button>
            </div>
            <!-- Modal body -->
            <div class="p-4 md:p-5 space-y-4">
              <span id="countdown" class="font-bold"></span>
            </div>
            <!-- Modal footer -->
            <div
              class="flex items-center justify-center p-4 md:p-5 border-t border-gray-200 rounded-b dark:border-gray-600"
            >
              <button
                data-modal-hide="default-modal"
                type="button"
                disabled
                id="stop-record"
                class="cursor-not-allowed text-white bg-gradient-to-tl from-[#ff8906] to-[#f25f4c] hover:scale-105 transition-all focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800"
                >Terminar Grabación</button
              >
            </div>
          </div>
        </div>
      </div>
    </section>

    <script>
      import "flowbite";
      import Swal from "sweetalert2";
      window.onload = () => {
        const animation = document.getElementById("animation") as HTMLElement;
        const title = document.getElementById(
          "title-record-audio"
        ) as HTMLElement;
        const stopRecord = document.getElementById(
          "stop-record"
        ) as HTMLElement;
        const modal = document.getElementById("default-modal");
        const screen = document.getElementById(
          "screen-option"
        ) as HTMLInputElement;
        const mic = document.getElementById("mic-option") as HTMLInputElement;
        const sound = document.getElementById(
          "sound-option"
        ) as HTMLInputElement;
        const $button = document.getElementById("recorder")!;

        $button.addEventListener("click", async () => {
          if (
            screen.checked == false &&
            mic.checked == false &&
            sound.checked == false
          ) {
            Swal.fire({
              icon: "error",
              title: "Error",
              text: "Selecciona una opción de grabación",
            });
          }
          if (screen.checked) {
            const media = await navigator.mediaDevices.getDisplayMedia({
              video: { frameRate: { ideal: 60 } },
            });
            const mediarecorder = new MediaRecorder(media, {
              mimeType: "video/webm;codecs=vp8,opus",
            });
            mediarecorder.start();

            const [video] = media.getVideoTracks();
            video.addEventListener("ended", () => {
              mediarecorder.stop();
            });

            mediarecorder.addEventListener("dataavailable", (e) => {
              const link = document.createElement("a");
              link.href = URL.createObjectURL(e.data);
              link.download = "captura.mp4";
              link.click();
            });
          } else {
            console.log("no");
          }
          if (mic.checked) {
            let isRecording = false;
            let chunks = [];
            const stream = await navigator.mediaDevices.getUserMedia({
              audio: true,
            });
            const mediaStream = stream;
            const mediaRecorder = new MediaRecorder(stream);

            mediaRecorder.addEventListener("dataavailable", (event) => {
              chunks.push(event.data);
            });

            //mic only
            const btn = document.querySelector(
              '[data-modal-toggle="default-modal"]'
            ) as HTMLElement;
            btn.click();
            let totalTime = 3;

            function updateClock() {
              const countdown = document.getElementById("countdown");
              if (countdown) {
                countdown.innerHTML =
                  "La grabación comienza en: " + totalTime.toString();
              }

              if (totalTime === 0) {
                animation.classList.toggle("hidden");
                title.innerHTML = "Grabando!";
                countdown.innerHTML = "";
                stopRecord.classList.toggle("cursor-not-allowed");
                stopRecord.removeAttribute("disabled");
                mediaRecorder.start();
                stopRecord.addEventListener("click", () => {
                  mediaRecorder.addEventListener("stop", () => {
                    // Código para descargar
                    const audioBlob = new Blob(chunks, { type: "audio/mp3" });
                    const audioUrl = URL.createObjectURL(audioBlob);
                    const link = document.createElement("a");
                    link.href = audioUrl;
                    link.download = "recording.mp3";
                    document.body.appendChild(link);
                    link.click();
                    mediaStream.getTracks().forEach((track) => track.stop());
                    stopRecord.setAttribute("disabled", "");
                    stopRecord.classList.toggle("cursor-not-allowed");
                    title.innerHTML = "Grabación de audio";
                    animation.classList.toggle("hidden");
                    // Limpiar chunks
                    chunks = [];
                  });
                  mediaRecorder.stop();
                });
              } else {
                totalTime -= 1;
                setTimeout(updateClock, 1000);
              }
            }

            updateClock();
          }
        });
      };
    </script>
  </main>
</Layout>
